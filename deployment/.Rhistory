credit_card$PAY_AMT4<-(credit_card$PAY_AMT4- mean(credit_card$PAY_AMT4))/sd(credit_card$PAY_AMT4)
credit_card$PAY_AMT5<-(credit_card$PAY_AMT5- mean(credit_card$PAY_AMT5))/sd(credit_card$PAY_AMT5)
credit_card$PAY_AMT6<-(credit_card$PAY_AMT6- mean(credit_card$PAY_AMT6))/sd(credit_card$PAY_AMT6)
credit_card$SEX<-as.factor(credit_card$SEX)
credit_card$EDUCATION<-as.factor(credit_card$EDUCATION)
credit_card$MARRIAGE<-as.factor(credit_card$MARRIAGE)
credit_card$PAY_0<-as.factor(credit_card$PAY_0)
credit_card$PAY_2<-as.factor(credit_card$PAY_2)
credit_card$PAY_3<-as.factor(credit_card$PAY_3)
credit_card$PAY_4<-as.factor(credit_card$PAY_4)
credit_card$PAY_5<-as.factor(credit_card$PAY_5)
credit_card$PAY_6<-as.factor(credit_card$PAY_6)
credit_card$default_payment_next_month<-as.factor(credit_card$default_payment_next_month)
Sample <- sample(credit_card$ID, size = 0.8*nrow(credit_card), replace = FALSE)
Train <- credit_card[credit_card$ID %in% Sample, ]
Test <- credit_card[!credit_card$ID %in% Sample, ]
stopifnot(nrow(Train) + nrow(Test) == nrow(credit_card))
model <- glm(default_payment_next_month~LIMIT_BAL+SEX+EDUCATION+MARRIAGE+AGE+
PAY_0+PAY_2+PAY_3+PAY_4+PAY_5+PAY_6+BILL_AMT1+BILL_AMT2+
BILL_AMT3+BILL_AMT4+BILL_AMT5+BILL_AMT6+PAY_AMT1+PAY_AMT2+
PAY_AMT3+PAY_AMT4+PAY_AMT5+PAY_AMT6, family=binomial(link='logit'),data = Train)
summary(model)
fitted.results <- predict(model
,newdata = Test[,'default_payment_next_month']
# Specifying response means we want the probabilities
,type='response')
targetVar <- 'Survived'
# We'll do stratified sampling to split our data into training and test sets
library('caret')
inTrain <- createDataPartition(y = data[,targetVar], list = FALSE, p = .8)
train <- data[inTrain,]
test <- data[-inTrain,]
stopifnot(nrow(train) + nrow(test) == nrow(data))
xVars <- c("Pclass", 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked')
createModelFormula <- function(targetVar, xVars, includeIntercept = TRUE){
if(includeIntercept){
modelForm <- as.formula(paste(targetVar, "~", paste(xVars, collapse = '+ ')))
} else {
modelForm <- as.formula(paste(targetVar, "~", paste(xVars, collapse = '+ '), -1))
}
return(modelForm)
}
modelForm <- createModelFormula(targetVar, xVars)
model <- glm(modelForm,family=binomial(link='logit'),data=train)
summary(model)
anova(model, test="Chisq")
data <- read.csv('/Users/dyb/Desktop/train.csv'
, header= TRUE
,na.strings=c(""))
head(data)
summary(data)
str(data)
varsToDrop <- c('Cabin', 'PassengerId')
colsBefore <- ncol(data)
data <- data[,names(data)[!names(data) %in% varsToDrop]]
colsAfter <- ncol(data)
head(data)
# Always code defensively!
stopifnot(colsBefore == colsAfter + length(varsToDrop))
data$Age[is.na(data$Age)] <- mean(data$Age,na.rm=T)   #!!!!!!
EmbarkedMode <- names(sort(table(data$Embarked), decreasing = TRUE)[1])
data[is.na(data$Embarked), 'Embarked'] <- EmbarkedMode
targetVar <- 'Survived'
# We'll do stratified sampling to split our data into training and test sets
library('caret')
inTrain <- createDataPartition(y = data[,targetVar], list = FALSE, p = .8)
train <- data[inTrain,]
test <- data[-inTrain,]
stopifnot(nrow(train) + nrow(test) == nrow(data))
xVars <- c("Pclass", 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked')
createModelFormula <- function(targetVar, xVars, includeIntercept = TRUE){
if(includeIntercept){
modelForm <- as.formula(paste(targetVar, "~", paste(xVars, collapse = '+ ')))
} else {
modelForm <- as.formula(paste(targetVar, "~", paste(xVars, collapse = '+ '), -1))
}
return(modelForm)
}
modelForm <- createModelFormula(targetVar, xVars)
model <- glm(modelForm,family=binomial(link='logit'),data=train)
summary(model)
anova(model, test="Chisq")
# Let's see the performance on the test set
# Note the defaults on glm predicti
fitted.results <- predict(model
,newdata = test[,xVars]
# Specifying response means we want the probabilities
,type='response')
class(test[,xVars])
names(credit_card)
xVars<-c("LIMIT_BAL","SEX","EDUCATION","MARRIAGE","PAY_0","PAY_2","PAY_3","PAY_4","PAY_5","PAY_6","AGE","BILL_AMT1","BILL_AMT2","BILL_AMT3","BILL_AMT4","BILL_AMT5",
"BILL_AMT6","PAY_AMT1","PAY_AMT2","PAY_AMT3","PAY_AMT4","PAY_AMT5","PAY_AMT6")
fitted.results <- predict(model
,newdata = Test[,xVars]
# Specifying response means we want the probabilities
,type='response')
xVars<-c("LIMIT_BAL","SEX","EDUCATION","MARRIAGE","PAY_0","PAY_2","PAY_3","PAY_4","PAY_5","PAY_6","AGE","BILL_AMT1","BILL_AMT2","BILL_AMT3","BILL_AMT4","BILL_AMT5",
"BILL_AMT6","PAY_AMT1","PAY_AMT2","PAY_AMT3","PAY_AMT4","PAY_AMT5","PAY_AMT6")
fitted.results <- predict(model
,newdata = Test[,xVars]
# Specifying response means we want the probabilities
,type='response')
credit_card<-read_excel(file.choose(),range = "A2:Y30002")
colnames(credit_card)[25]<-"default_payment_next_month"
shiny::runApp('Desktop/yelp_dataset/code')
#Beverages
#per quarter
Beverages<-read.csv(file.choose(),sep=',',header = T,stringsAsFactors = F)
Beverages$date<-strptime(Beverages$date, "%Y-%m-%d %H:%M:%S")
Beverages[,"hour"]<-sapply(Beverages$date, function(x) format(x,"%H"))
Beverages$hour<-as.numeric(Beverages$hour)
d<-Beverages[,c(6,10)]
data<-tbl_df(d)
d2<-data %>%
group_by(hour) %>%
summarize(average_stars=mean(stars))
plot(d2$hour,d2$average_stars,"h")
library(dplyr)
Beverages$date<-strptime(Beverages$date, "%Y-%m-%d %H:%M:%S")
Beverages[,"hour"]<-sapply(Beverages$date, function(x) format(x,"%H"))
Beverages$hour<-as.numeric(Beverages$hour)
d<-Beverages[,c(6,10)]
data<-tbl_df(d)
d2<-data %>%
group_by(hour) %>%
summarize(average_stars=mean(stars))
plot(d2$hour,d2$average_stars,"h")
runApp('Desktop/yelp_dataset/code')
runApp('Desktop/yelp_dataset/code')
Be<-data %>%
group_by(hour) %>%
summarize(average_stars=mean(stars))
plot(Be$hour,Be$average_stars,"h")
d<-Beverages[,c(3,6)]
d$date<-as.Date(d$date)
d<-d[order(d$date),]
d[,"year_quarter"]<-sapply(d$date , function(x) return(quarter(x, with_year = T)))
data<-tbl_df(d)
d2<-data %>%
group_by(year_quarter) %>%
summarize(average_stars=mean(stars))
d2.ts_q = ts(d2[3:54,2], start=2006, freq=4)
plot(d2.ts_q,main="Beverages stars")
boxplot(d2.ts_q ~ cycle(d2.ts_q))
title(main = "Beverages stars")
#Pizza
#per month
Pizza<-read.csv(file.choose(),sep=',',header = T,stringsAsFactors = F)
Pizza$date<-strptime(Pizza$date, "%Y-%m-%d %H:%M:%S")
Pizza[,"hour"]<-sapply(Pizza$date, function(x) format(x,"%H"))
Pizza$hour<-as.numeric(Pizza$hour)
d<-Pizza[,c(6,10)]
data<-tbl_df(d)
Pi<-data %>%
group_by(hour) %>%
summarize(average_stars=mean(stars))
plot(Pi$hour,Pi$average_stars,"h", main="Pizza stars VS hour")
#American_fast_food
#per month
American_fast_food<-read.csv(file.choose(),sep = ',',header = T)
American_fast_food$date<-strptime(American_fast_food$date, "%Y-%m-%d %H:%M:%S")
American_fast_food[,"hour"]<-sapply(American_fast_food$date, function(x) format(x,"%H"))
American_fast_food$hour<-as.numeric(American_fast_food$hour)
d<-American_fast_food[,c(6,10)]
data<-tbl_df(d)
Am<-data %>%
group_by(hour) %>%
summarize(average_stars=mean(stars))
plot(Am$hour,Am$average_stars,"h", main="American_fast_food stars VS hour")
#Chinese
Chinese<-read.csv(file.choose(),sep = ',',header = T)
#plot hour~stars
Chinese$date<-strptime(Chinese$date, "%Y-%m-%d %H:%M:%S")
Chinese[,"hour"]<-sapply(Chinese$date, function(x) format(x,"%H"))
Chinese$hour<-as.numeric(Chinese$hour)
d<-Chinese[,c(6,10)]
data<-tbl_df(d)
Ch<-data %>%
group_by(hour) %>%
summarize(average_stars=mean(stars))
plot(Ch$hour,Ch$average_stars,"h", main="Chinese stars VS hour")
runApp('Desktop/yelp_dataset/code')
Beverages$date<-strptime(Beverages$date, "%Y-%m-%d %H:%M:%S")
Beverages[,"hour"]<-sapply(Beverages$date, function(x) format(x,"%H"))
Beverages$hour<-as.numeric(Beverages$hour)
d<-Beverages[,c(6,10)]
data<-tbl_df(d)
Be<-data %>%
group_by(hour) %>%
summarize(average_stars=mean(stars))
plot(Be$hour,Be$average_stars,"h")
runApp('Desktop/yelp_dataset/code')
plot(Am$hour,Am$average_stars,"h")
runApp('Desktop/yelp_dataset/code')
runApp('Desktop/yelp_dataset/code')
runApp('Desktop/yelp_dataset/code')
runApp('Desktop/yelp_dataset/code')
runApp('Desktop/yelp_dataset/code')
data
rm(data)
data
plot(Be$hour,Be$average_stars,"h")
runApp('Desktop/yelp_dataset/code')
runApp('Desktop/yelp_dataset/code')
runApp('Desktop/yelp_dataset/code')
runApp('Desktop/yelp_dataset/code')
runApp('Desktop/yelp_dataset/code')
plot(Pi$hour,Pi$average_stars,"h", main="Pizza stars VS hour")
runApp('Desktop/yelp_dataset/code')
runApp('Desktop/yelp_dataset/code')
runApp('Desktop/yelp_dataset/code')
ui<-fluidPage(
actionButton(inputId = "clicks", label =  "click me")
)
server<-function(input, output){
observeEvent(input$clicks, {print(as.numeric(input$clicks))})
}
shinyApp(ui = ui, server = server)
ui<-fluidPage(
actionButton(inputId = "norm", label =  "Normal"),
actionButton(inputId = "unif", label =  "Uniform"),
plotOutput("hist")
)
server<-function(input, output){
rv<-reactiveValues(data=rnorm(100))
observeEvent(input$norm, {rv$data<-rnorm(100)})
observeEvent(input$unif, {rv$data<-runif(100)})
output$hist<-renderPlot(hist({rv$data}))
}
shinyApp(ui = ui, server = server)
runApp('Desktop/yelp_dataset/code')
library(reticulate)
path_to_python <-"/Users/dyb/anaconda/bin/python"
use_python("/Users/dyb/anaconda/bin/python", required = TRUE)
py_config()
path = "/Users/dyb/Desktop/Pizza_review.csv"
num_topics = 7
new_document = 'How a Pentagon deal became an identity crisis for Google, the food is really great and the place is quiet.'
source_python("p1.py")
getwd()
setwd("/Users/dyb/Desktop")
source_python("p1.py")
path = "/Users/dyb/Desktop/Pizza_review.csv"
num_topics = 7
new_document = 'How a Pentagon deal became an identity crisis for Google, the food is really great and the place is quiet.'
source_python("p1.py")
path
source_python("p1.py")
source_python("p1.py")
source_python("Implement_Pizza.py")
print("Topic: {}\t \nRange: {}".format(index,predition.loc['range'][index]))
index
predition.loc['range'][index]
predition[index, 'range']
setwd("/Users/dyb/Desktop/Predict_Chinese")
getwd()
path = "/Users/dyb/Desktop/Predict_Chinese/Predict_Chinese.py"
source_python("Predict_Chinese.py")
source_python("Predict_Chinese.py")
source_python("Predict_Chinese.py")
source_python("Predict_Chinese.py")
predict(new_document)
p<-predict(new_document)
p
p[1]
p[[1]]
p[[1]][1]
p[[2]]
shiny::runApp('~/Desktop/yelp_dataset/code')
income2016<-read.csv(file.choose(), sep = ',', header = T)
Pizza2016<-read.csv(file.choose(), sep = ',', header = T)
View(income2016)
income2016<-income2016[,2:4]
Pizza2016<-Pizza2016[,2:4]
View(Pizza2016)
Pizza2016<-read.csv(file.choose(), sep = ',', header = T)
Pizza2016<-Pizza2016[,-1]
length(Pizza2016$census_tract)
length(unique(Pizza2016$census_tract))
length(unique(income2016$census_tract))
?merge
Pizza2016_new<-merge(Pizza2016, income2016, by.x ="consus_tract")
Pizza2016_new<-merge(Pizza2016, income2016, all.x = "consus_tract")
Pizza2016_new<-merge(Pizza2016, income2016, all.x = True, by="consus_tract")
Pizza2016_new<-merge(Pizza2016, income2016, all.x = True, by.x="consus_tract")
Pizza2016_new<-merge(Pizza2016, income2016, all.x = True, by.y="consus_tract")
names(Pizza2016)
Pizza2016_new<-merge(Pizza2016, income2016, all.x = True, by.x="census_tract")
Pizza2016_new<-merge(Pizza2016, income2016, all.x = TRUE, by.x="census_tract")
View(Pizza2016_new)
sum(is.na(Pizza2016_new$income))
income2016<-read.csv(file.choose(), sep = ',', header = T)
income2016<-income2016[,3:4]
Pizza2016_new<-merge(Pizza2016, income2016, all.x = TRUE, by.x="census_tract")
sum(is.na(Pizza2016_new$))
sum(is.na(Pizza2016_new$income))
Pizza_income<- Pizza2016_new[!is.na(Pizza2016_new$income),]
View(Pizza_income)
Pizza_income<- Pizza2016_new[!is.na(Pizza2016_new$income),c(4,8)]
View(Pizza_income)
names(Pizza_income)
Pizza_income<- Pizza2016_new[!is.na(Pizza2016_new$income),c(1,4,8)]
names(Pizza_income)
Pizza_income$state <- factor(Pizza_income$census_tract, levels = Pizza_income[order(Pizza_income$ave_stars),"income"])
library(ggplot2)
g1 <- ggplot(data = Pizza_income, aes(x = income, y = ave_stars)) +
geom_bar(stat = "identity") + ggtitle("ave_stars") +
theme(axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.y = element_blank(), axis.ticks.y = element_blank(), plot.margin = unit(c(1,0,1,0), "mm")) +
scale_y_reverse() + coord_flip()
g2 <- ggplot(data = Pizza_income, aes(x = income, y = ave_stars)) +
geom_bar(stat = "identity") + ggtitle("income") +
theme(axis.title.x = element_blank(), axis.title.y = element_blank(), plot.margin = unit(c(1,5,1,0), "mm")) +
coord_flip()
multiplot(g1, g2, cols = 2)
??multiplot
multiplot(g1, g2, cols = 2)
library(ggplot2)
multiplot(g1, g2, cols = 2)
income2016<-read.csv(file.choose(), sep = ',', header = T)
income2016<-income2016[,3:4]
Pizza2016<-Pizza2016[,-1]
Pizza2016_new<-merge(Pizza2016, income2016, all.x = TRUE, by.x="census_tract")
Pizza_income<- Pizza2016_new[!is.na(Pizza2016_new$income),c(4,8)]
income2016<-read.csv(file.choose(), sep = ',', header = T)
Pizza2016<-read.csv(file.choose(), sep = ',', header = T)
income2016<-income2016[,3:4]
Pizza2016<-Pizza2016[,-1]
Pizza2016_new<-merge(Pizza2016, income2016, all.x = TRUE, by.x="census_tract")
Pizza_income<- Pizza2016_new[!is.na(Pizza2016_new$income),c(4,8)]
P<-sort(Pizza_income)
P<-sort(Pizza_income$ave_stars,Pizza_income)
P<-Pizza_income[order(Pizza_income$ave_stars),]
View(P)
?order
P<-Pizza_income[order(Pizza_income$ave_stars, decreasing = T ),]
write.csv(P,"/Users/dyb/Desktop/Pizza_income2016.csv",col.names = F)
income2016<-read.csv(file.choose(), sep = ',', header = T)
Pizza2016<-read.csv(file.choose(), sep = ',', header = T)
income2016<-income2016[,3:4]
Pizza2016<-Pizza2016[,-1]
Pizza2016_new<-merge(Pizza2016, income2016, all.x = TRUE, by.x="census_tract")
Pizza_income<- Pizza2016_new[!is.na(Pizza2016_new$income),c(1,4,8)]
P<-Pizza_income[order(Pizza_income$ave_stars, decreasing = T ),]
length(unique(P$census_tract))
names(Pizza_income)
DATA<-Pizza_income
library(grid)
g.mid<-ggplot(DATA,aes(x=1,y=census_tract))+geom_text(aes(label=census_tract))+
geom_segment(aes(x=0.94,xend=0.96,yend=census_tract))+
geom_segment(aes(x=1.04,xend=1.065,yend=census_tract))+
ggtitle("")+
ylab(NULL)+
scale_x_continuous(expand=c(0,0),limits=c(0.94,1.065))+
theme(axis.title=element_blank(),
panel.grid=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.background=element_blank(),
axis.text.x=element_text(color=NA),
axis.ticks.x=element_line(color=NA),
plot.margin = unit(c(1,-1,1,-1), "mm"))
g1 <- ggplot(data = DATA, aes(x = census_tract, y = income)) +
geom_bar(stat = "identity") + ggtitle("income") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = unit(c(1,-1,1,0), "mm")) +
scale_y_reverse() + coord_flip()
g2 <- ggplot(data = DATA, aes(x = census_tract, y = ave_stars)) +xlab(NULL)+
geom_bar(stat = "identity") + ggtitle("ave_stars") +
theme(axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(1,0,1,-1), "mm")) +
coord_flip()
library(gridExtra)
gg1 <- ggplot_gtable(ggplot_build(g1))
gg2 <- ggplot_gtable(ggplot_build(g2))
gg.mid <- ggplot_gtable(ggplot_build(g.mid))
grid.arrange(gg1,gg.mid,gg2,ncol=3,widths=c(4/9,1/9,4/9))
Pizza_income<-Pizza_income[order(Pizza_income$income),]
Pizza_income<-Pizza_income[order(Pizza_income$income, decreasing = T),]
write.csv(Pizza_income,"/Users/dyb/Desktop/Pizza_income2016.csv",col.names = F)
names(Pizza_income)
P<-data %>%
group_by(date) %>%
summarize(average_stars=mean(ave_stars),average_income=mean(income))
library(dplyr)
data<-tbl_df(Pizza_incomed)
library(dplyr)
data<-tbl_df(Pizza_income)
P<-data %>%
group_by(date) %>%
summarize(average_stars=mean(ave_stars),average_income=mean(income))
P<-data %>%
group_by(census_tract) %>%
summarize(average_stars=mean(ave_stars),average_income=mean(income))
Pizza_income<-P[order(P$average_stars, decreasing = T),]
write.csv(Pizza_income,"/Users/dyb/Desktop/Pizza_income2016.csv",col.names = F)
ui<-dashboardPage(
dashboardHeader(title = "Yelp Stars"),
dashboardSidebar(
sidebarMenu(
menuItem("Slides", tabName = "slides", icon = icon("file-powerpoint")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets",
badgeColor = "green"),
menuItem("Widgets1", icon = icon("crop"), tabName = "widgets1",
badgeColor = "green"),
menuItem("Widgets2", icon = icon("th"), tabName = "widgets2",
badgeColor = "green"),
menuItem("Widget3", icon = icon("th"), tabName = "widgets3",
badgeColor = "green"),
menuItem("Widget4", icon = icon("th"), tabName = "widgets4",
badgeColor = "green",
menuItem("Widget4-1", icon = icon("th"), tabName = "widgets4-1",
badgeColor = "green"),
menuItem("Widget4-2", icon = icon("th"), tabName = "widgets4-2",
badgeColor = "green"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "slides",
box(width=12,
tabBox(width=12,id="tabBox_next_previous",
tabPanel("Page1",
tags$img(src="1.png",height=490,width=900)),
tabPanel("Page2",tags$img(src="2.png",height=490,width=900)),
tabPanel("Page3",tags$img(src="3.png",height=490,width=900)),
tabPanel("Page4",tags$img(src="4.png",height=490,width=900)),
tabPanel("Page4",tags$img(src="4.png",height=490,width=900)),
tabPanel("Page4",tags$img(src="4.png",height=490,width=900)),
tabPanel("Page4",tags$img(src="4.png",height=490,width=900)),
tabPanel("Page4",tags$img(src="4.png",height=490,width=900)),
tabPanel("Page4",tags$img(src="4.png",height=490,width=900)),
tabPanel("Page4",tags$img(src="4.png",height=490,width=900)),
tabPanel("Page4",tags$img(src="4.png",height=490,width=900)),
tabPanel("Page4",tags$img(src="4.png",height=490,width=900)),
tags$script("$('body').mouseover(function() {
list_tabs=[];
$('#tabBox_next_previous li a').each(function(){
list_tabs.push($(this).html())
});
Shiny.onInputChange('List_of_tab', list_tabs);})
")
),
uiOutput("Next_Previous")
)
),
tabItem(tabName = "widgets",
h2("Any question? Please", tags$a(href="https://www.google.com", "Google"),"first"),
fluidRow(
box(plotOutput("plot1")),
box(
"Box content here", br(), "More box content",
sliderInput("slider", "Slider input:", 1, 100, 50),
textInput("text", "Text input:")
)
)
),
tabItem(tabName = "widgets1",
wellPanel(sliderInput(inputId = "num", label = "choose a number", value = 59,
min = 0, max = 1000),
actionButton(inputId = "go", label = "update"),
plotOutput("hist"))
),
tabItem(tabName = "widgets2",
navbarPage( "Stars VS hours",
tabPanel("Pizza", plotOutput("Pi")),
tabPanel("American Fast Food", plotOutput("Am")),
navbarMenu("others",
tabPanel("Chinese Food", plotOutput("Ch")),
tabPanel("Beverages", plotOutput("Be"))
)
)
),
tabItem(tabName = "widgets3",
wellPanel(includeHTML("Pizza_html"))
),
tabItem(tabName = "widgets4-1",
h2("Hello")
),
tabItem(tabName = "widgets4-2",
h2("Widgets tab contenttab contentab contentab conten"))
)
)
)
runApp('~/Desktop/code')
runApp('~/Desktop/code')
runApp('~/Desktop/code')
runApp('~/Desktop/code')
library(reticulate)
path_to_python <-"/Users/dyb/anaconda/bin/python"
use_condaenv(condaenv = "/Users/dyb/anaconda/bin/python", required = TRUE)
py_config()
library(reticulate)
use_python("/Users/dyb/anaconda/bin/python", required = TRUE)
py_config()
library(shiny)
library(shinydashboard)
getwd()
new_document = 'How a Pentagon deal became an identity crisis for Google, the food is really great and the place is quiet.'
source_python("Predict_Chinese.py")
setwd("/Users/dyb/Desktop/predict_chinese")
source_python("Predict_Chinese.py")
getwd()
setwd("/Users/dyb/Desktop/predict_chinese")
source_python("/Users/dyb/Desktop/predict_chinese/Predict_Chinese.py")
setwd("/Users/dyb/Desktop/Predict_Chinese")
getwd()
setwd("/Users/dyb/Desktop/Predict_Chinese")
